import random
import gradio as gr

from src.GPTClient import GPTClient
from src.prompts.prompt import PromptProcess
from src.configs.configs import client_config


client = GPTClient(**client_config)
prompt_obj = PromptProcess("ielts_translate")

# Initialize lists to store user messages and bot responses
messages = []
responds = []


def translate(message, language_change):
    """Translates the input message to the specified language using GPT model.

    Args:
        message (str): The message to be translated.
        language_change (str): The target language to translate the message to.

    Returns:
        str: The translated message as generated by the GPT model.
    """

    # Generate prompt using the message and chat history
    message = (
        "please translate this sentence into " + language_change + ": " + message + "\n"
    )
    prompt = prompt_obj.generate_model_prompt(msg=message, chat_history=[])

    # Send prompt to GPT model and retrieve response
    result, err = client.send_and_recv(msg=prompt, temp=0.9, out_num=1)
    bot_message = result[0]

    # Append user message and bot response to their respective lists
    messages.append(message)
    responds.append(bot_message)

    return bot_message


def respond(message, chat_history):
    """Generates a response to the user's message using the chat history and GPT model.

    Args:
        message (str): The user's message to generate a response for.
        chat_history (list): The chat history to be used in generating the response.

    Returns:
        tuple: A tuple containing an empty string and updated chat history list.
    """

    # If chat history is empty, append the first message and response to it
    if len(chat_history) == 0:
        chat_history.append((messages[0], responds[0]))

    # Generate prompt using the message and chat history
    prompt = prompt_obj.generate_model_prompt(
        msg=message, chat_history=chat_history[-5:]
    )

    # Send prompt to GPT model and retrieve response
    result, err = client.send_and_recv(msg=prompt, temp=0.9, out_num=1)
    bot_message = result[0]

    # Append user message and bot response to chat history
    chat_history.append((message, bot_message))

    return "", chat_history


def TranslationTab():
    """Defines the translation tab UI using Gradio library."""
    with gr.Tab("翻译"):
        with gr.Row() as row:
            with gr.Column():
                # Define UI elements for input
                input_letter = gr.Textbox(label="输入:")
                language_change_btn = gr.Radio(
                    ["English", "Japanese", "Chinese"], label="翻译语言"
                )
                language_change_btn.change(
                    fn=lambda x: x,
                    inputs=language_change_btn,
                    outputs=language_change_btn,
                )
                submit_btn = gr.Button("提交")
                examples = gr.Examples(
                    examples=["I went to the supermarket yesterday.", "我昨天去了超市。"],
                    inputs=[input_letter],
                )

                # Define UI element for output
                output_letter = gr.Textbox(label="翻译结果输出:")

                # Attach translation function to submit button click event
                submit_btn.click(
                    translate,
                    inputs=[input_letter, language_change_btn],
                    outputs=output_letter,
                    api_name="translate-to-german",
                )

            with gr.Column():
                # Define UI elements for chatbot
                chatbot = gr.Chatbot(label="会话记录")
                msg = gr.Textbox(label="问题输入:")
                clear = gr.Button("Clear")

                msg.submit(respond, [msg, chatbot], [msg, chatbot], queue=False)
                clear.click(lambda: None, None, chatbot, queue=False)
